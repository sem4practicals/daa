-- Create Database
CREATE DATABASE IF NOT EXISTS college_db;
USE college_db;

-- Create Tables
CREATE TABLE STUDENT (
    RollNo CHAR(6) PRIMARY KEY,
    StudentName VARCHAR(20) NOT NULL,
    Course VARCHAR(10),
    DOB DATE
);

CREATE TABLE SOCIETY (
    SocID CHAR(6) PRIMARY KEY,
    SocName VARCHAR(20) NOT NULL,
    MentorName VARCHAR(15),
    TotalSeats INT UNSIGNED
);

CREATE TABLE ENROLLMENT (
    RollNo CHAR(6),
    SID CHAR(6),
    DateOfEnrollment DATE,
    PRIMARY KEY (RollNo, SID),
    FOREIGN KEY (RollNo) REFERENCES STUDENT(RollNo),
    FOREIGN KEY (SID) REFERENCES SOCIETY(SocID)
);

-- Insert Sample Data into STUDENT table
INSERT INTO STUDENT VALUES
('A0001', 'John Smith', 'BTECH', '2000-05-15'),
('A0002', 'Mary Johnson', 'BCA', '2001-07-22'),
('A0003', 'Amit Kumar', 'BTECH', '2002-03-10'),
('A0004', 'Ananya Sharma', 'BSC', '2001-11-30'),
('A0005', 'Abhinav Verma', 'CHEMISTRY', '2000-01-25'),
('A0006', 'Sarah Wilson', 'COMPUTER SCIENCE', '2001-09-12'),
('A0007', 'David Miller', 'CHEMISTRY', '2000-12-05'),
('A0008', 'Ravi Patel', 'BTECH', '2002-04-18'),
('A0009', 'Priya Singh', 'COMPUTER SCIENCE', '2001-02-27'),
('X0009', 'Michael Brown', 'BCA', '2002-06-08'),
('Z0009', 'Jennifer Lee', 'BSC', '2000-10-19'),
('B0010', 'Rahul Gupta', 'BTECH', '2003-01-02'),  -- Youngest student
('C0011', 'Simran Kaur', 'BSC', '2001-08-14'),
('D0012', 'Alex Turner', 'CHEMISTRY', '2002-05-20'),
('E0013', 'Neha Reddy', 'COMPUTER SCIENCE', '2001-03-25');

-- Insert Sample Data into SOCIETY table
INSERT INTO SOCIETY VALUES
('S0001', 'NSS', 'Dr. Sharma', 20),
('S0002', 'Coding Club', 'Prof. Gupta', 15),
('S0003', 'Debating', 'Mrs. Verma', 25),
('S0004', 'Dancing', 'Mr. Kapoor', 30),
('S0005', 'Sashakt', 'Dr. K Gupta', 10),
('S0006', 'Sports', 'Mr. Singh', 40),
('S0007', 'Science Club', 'Dr. Yadav', 20),
('S0008', 'Start', 'Mr. Mehta', 50),
('S0009', 'Shield', 'Mrs. Arora', 15),
('S0010', 'Script', 'Mr. Joshi', 20);

-- Insert Sample Data into ENROLLMENT table
INSERT INTO ENROLLMENT VALUES
('A0001', 'S0001', '2017-07-15'),
('A0001', 'S0002', '2017-08-20'),  -- Student enrolled in multiple societies
('A0001', 'S0003', '2017-09-05'),  -- Student enrolled in multiple societies
('A0002', 'S0001', '2017-07-16'),
('A0003', 'S0002', '2017-08-10'),
('A0003', 'S0004', '2017-10-12'),  -- Student enrolled in multiple societies
('A0004', 'S0001', '2017-07-22'),
('A0004', 'S0003', '2017-09-15'),  -- Student enrolled in multiple societies
('A0005', 'S0003', '2017-09-18'),
('A0006', 'S0004', '2017-10-05'),
('A0007', 'S0005', '2017-11-10'),
('A0008', 'S0001', '2017-07-25'),
('A0008', 'S0005', '2017-11-15'),  -- Student enrolled in multiple societies
('A0009', 'S0001', '2017-07-30'),
('X0009', 'S0002', '2017-08-22'),
('Z0009', 'S0004', '2017-10-20'),
('B0010', 'S0001', '2017-08-01'),  -- Youngest student in NSS
('C0011', 'S0005', '2017-11-22'),
('D0012', 'S0003', '2017-09-25');
-- Student E0013 is not enrolled in any society

-- Solutions to the given queries

-- 1. Retrieve names of students enrolled in any society.
SELECT DISTINCT s.StudentName
FROM STUDENT s
JOIN ENROLLMENT e ON s.RollNo = e.RollNo
ORDER BY s.StudentName;

-- 2. Retrieve all society names.
SELECT SocName FROM SOCIETY ORDER BY SocName;

-- 3. Retrieve students' names starting with letter 'A'.
SELECT StudentName FROM STUDENT WHERE StudentName LIKE 'A%';

-- 4. Retrieve students' details studying in courses 'computer science' or 'chemistry'.
SELECT * FROM STUDENT 
WHERE Course = 'COMPUTER SCIENCE' OR Course = 'CHEMISTRY';

-- 5. Retrieve students' names whose roll no either starts with 'X' or 'Z' and ends with '9'
SELECT StudentName FROM STUDENT 
WHERE (RollNo LIKE 'X%9' OR RollNo LIKE 'Z%9');

-- 6. Find society details with more than N TotalSeats where N is to be input by the user
-- Assuming N = 20 for this example
SELECT * FROM SOCIETY WHERE TotalSeats > 20;

-- 7. Update society table for mentor name of a specific society
UPDATE SOCIETY SET MentorName = 'Dr. New Mentor' WHERE SocID = 'S0001';

-- 8. Find society names in which more than five students have enrolled
SELECT s.SocName
FROM SOCIETY s
JOIN ENROLLMENT e ON s.SocID = e.SID
GROUP BY s.SocID, s.SocName
HAVING COUNT(e.RollNo) > 5;

-- 9. Find the name of youngest student enrolled in society 'NSS'
SELECT s.StudentName
FROM STUDENT s
JOIN ENROLLMENT e ON s.RollNo = e.RollNo
JOIN SOCIETY soc ON e.SID = soc.SocID
WHERE soc.SocName = 'NSS'
ORDER BY s.DOB DESC
LIMIT 1;

-- 10. Find the name of most popular society (on the basis of enrolled students)
SELECT s.SocName
FROM SOCIETY s
JOIN ENROLLMENT e ON s.SocID = e.SID
GROUP BY s.SocID, s.SocName
ORDER BY COUNT(e.RollNo) DESC
LIMIT 1;

-- 11. Find the name of two least popular societies (on the basis of enrolled students)
SELECT s.SocName
FROM SOCIETY s
LEFT JOIN ENROLLMENT e ON s.SocID = e.SID
GROUP BY s.SocID, s.SocName
ORDER BY COUNT(e.RollNo) ASC
LIMIT 2;

-- 12. Find the student names who are not enrolled in any society
SELECT s.StudentName
FROM STUDENT s
LEFT JOIN ENROLLMENT e ON s.RollNo = e.RollNo
WHERE e.RollNo IS NULL;

-- 13. Find the student names enrolled in at least two societies
SELECT s.StudentName
FROM STUDENT s
JOIN ENROLLMENT e ON s.RollNo = e.RollNo
GROUP BY s.RollNo, s.StudentName
HAVING COUNT(e.SID) >= 2;

-- 14. Find society names in which maximum students are enrolled
SELECT s.SocName
FROM SOCIETY s
JOIN ENROLLMENT e ON s.SocID = e.SID
GROUP BY s.SocID, s.SocName
HAVING COUNT(e.RollNo) = (
    SELECT COUNT(RollNo) 
    FROM ENROLLMENT 
    GROUP BY SID 
    ORDER BY COUNT(RollNo) DESC 
    LIMIT 1
);

-- 15. Find names of all students who have enrolled in any society and society names in which at least one student has enrolled
-- Part 1: Students enrolled in any society
SELECT DISTINCT s.StudentName
FROM STUDENT s
JOIN ENROLLMENT e ON s.RollNo = e.RollNo;

-- Part 2: Societies with at least one student enrolled
SELECT DISTINCT soc.SocName
FROM SOCIETY soc
JOIN ENROLLMENT e ON soc.SocID = e.SID;

-- 16. Find names of students who are enrolled in any of the three societies 'Debating', 'Dancing' and 'Sashakt'.
SELECT DISTINCT s.StudentName
FROM STUDENT s
JOIN ENROLLMENT e ON s.RollNo = e.RollNo
JOIN SOCIETY soc ON e.SID = soc.SocID
WHERE soc.SocName IN ('Debating', 'Dancing', 'Sashakt');

-- 17. Find society names such that its mentor has a name with 'Gupta' in it.
SELECT SocName
FROM SOCIETY
WHERE MentorName LIKE '%Gupta%';

-- 18. Find the society names in which the number of enrolled students is only 10% of its capacity.
SELECT s.SocName
FROM SOCIETY s
LEFT JOIN ENROLLMENT e ON s.SocID = e.SID
GROUP BY s.SocID, s.SocName, s.TotalSeats
HAVING COUNT(e.RollNo) = s.TotalSeats * 0.1;

-- 19. Display the vacant seats for each society.
SELECT s.SocName, s.TotalSeats, 
       s.TotalSeats - COUNT(e.RollNo) AS VacantSeats
FROM SOCIETY s
LEFT JOIN ENROLLMENT e ON s.SocID = e.SID
GROUP BY s.SocID, s.SocName, s.TotalSeats;

-- 20. Increment Total Seats of each society by 10%
UPDATE SOCIETY SET TotalSeats = TotalSeats * 1.1;

-- 21. Add the enrollment fees paid ('yes'/'No') field in the enrollment table.
ALTER TABLE ENROLLMENT ADD COLUMN FeesPaid ENUM('Yes', 'No') DEFAULT 'No';

-- 22. Update date of enrollment of society id 's1' to '2018-01-15', 's2' to current date and 's3' to '2018-01-02'.
UPDATE ENROLLMENT SET DateOfEnrollment = '2018-01-15' WHERE SID = 'S0001';
UPDATE ENROLLMENT SET DateOfEnrollment = CURRENT_DATE() WHERE SID = 'S0002';
UPDATE ENROLLMENT SET DateOfEnrollment = '2018-01-02' WHERE SID = 'S0003';

-- 23. Create a view to keep track of society names with the total number of students enrolled in it.
CREATE VIEW SocietyEnrollment AS
SELECT s.SocName, COUNT(e.RollNo) AS TotalEnrolled
FROM SOCIETY s
LEFT JOIN ENROLLMENT e ON s.SocID = e.SID
GROUP BY s.SocID, s.SocName;

-- 24. Find student names enrolled in all the societies.
SELECT s.StudentName
FROM STUDENT s
WHERE NOT EXISTS (
    SELECT soc.SocID
    FROM SOCIETY soc
    WHERE NOT EXISTS (
        SELECT e.SID
        FROM ENROLLMENT e
        WHERE e.RollNo = s.RollNo AND e.SID = soc.SocID
    )
);

-- 25. Count the number of societies with more than 5 students enrolled in it
SELECT COUNT(*) AS SocietiesWithMoreThan5Students
FROM (
    SELECT e.SID
    FROM ENROLLMENT e
    GROUP BY e.SID
    HAVING COUNT(e.RollNo) > 5
) AS SubQuery;

-- 26. Add column Mobile number in student table with default value '9999999999'
ALTER TABLE STUDENT ADD COLUMN MobileNumber VARCHAR(10) DEFAULT '9999999999';

-- 27. Find the total number of students whose age is > 20 years.
SELECT COUNT(*) AS StudentsOlderThan20
FROM STUDENT
WHERE TIMESTAMPDIFF(YEAR, DOB, CURRENT_DATE()) > 20;

-- 28. Find names of students who are born in 2001 and are enrolled in at least one society.
SELECT DISTINCT s.StudentName
FROM STUDENT s
JOIN ENROLLMENT e ON s.RollNo = e.RollNo
WHERE YEAR(s.DOB) = 2001;

-- 29. Count all societies whose name starts with 'S' and ends with 't' and at least 5 students are enrolled in the society.
SELECT COUNT(*) AS MatchingSocieties
FROM SOCIETY s
JOIN (
    SELECT SID
    FROM ENROLLMENT
    GROUP BY SID
    HAVING COUNT(RollNo) >= 5
) AS e ON s.SocID = e.SID
WHERE s.SocName LIKE 'S%t';

-- 30. Display the following information: Society name, Mentor name, Total Capacity, Total Enrolled, Unfilled Seats
SELECT 
    s.SocName,
    s.MentorName,
    s.TotalSeats AS TotalCapacity,
    COUNT(e.RollNo) AS TotalEnrolled,
    s.TotalSeats - COUNT(e.RollNo) AS UnfilledSeats
FROM SOCIETY s
LEFT JOIN ENROLLMENT e ON s.SocID = e.SID
GROUP BY s.SocID, s.SocName, s.MentorName, s.TotalSeats;